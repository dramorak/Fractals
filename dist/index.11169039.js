if(test)var trans1=new Transformation(200,0,0,200,0,0),trans2=new Transformation(0,100,-100,0,0,0),trans3=new Transformation(100,0,0,100,10,10),trans4=new Transformation(100,100,100,100,100,100),trans5=new Transformation(1,12,20,10,10,100),trans6=new Transformation(-10,-10,100,20,-100,-100),l1=new Line(trans1,black,1),l2=new Line(trans2),l3=new Line(trans3),l4=new Line(trans4),l5=new Line(trans5),l6=new Line(trans6),color=new Color(255,0,0),colorTrans=new Transformation(100,0,0,100,0,0,color),ex=colorTrans.apply(l1);function deepEquals(n,a){let o=function n(a,o){if(typeof a!=typeof o)return!1;if("object"==typeof a){let e=!0;for(var t in a)e=e&&n(a[t],o[t]);for(var t in o)e=e&&n(a[t],o[t]);return e}return"number"==typeof a?Math.abs(a-o)<1e-5:a===o}(n,a);return o}function assertEquals(n,a,o){deepEquals(n,a)?console.log("Test successful."):console.log(`Test[${o}] failed.`)}function transformationUnitTest(){let n=new Point(0,0),a=new Point(1,0),o=new Point(0,1),t=new Point(1,1);console.log("Beginning transformation test:"),console.log("Beginning primitive transformation tests:"),console.log("Testing transformation(id):");let e=id,r="Trivial identity test.";assertEquals(e.apply(n),n,r),assertEquals(e.apply(a),a,r),assertEquals(e.apply(o),o,r),assertEquals(e.apply(t),t,r),console.log("\n"),console.log("Testing transformation(double):");let s=new Transformation(2,0,0,2,0,0),i="Doubling length.";assertEquals(s.apply(n),new Point(0,0),i),assertEquals(s.apply(a),new Point(2,0),i),assertEquals(s.apply(o),new Point(0,2),i),assertEquals(s.apply(t),new Point(2,2),i),console.log("\n"),console.log("Testing transformation(rot-pi/2):");let l=new Transformation(0,1,-1,0,0,0),f="Rotate Pi/2 radians counter-clockwise.";assertEquals(l.apply(n),new Point(0,0),f),assertEquals(l.apply(a),new Point(0,1),f),assertEquals(l.apply(o),new Point(-1,0),f),assertEquals(l.apply(t),new Point(-1,1),f),console.log("\n"),console.log("Testing transformation(trans-1,1):");let w=new Transformation(1,0,0,1,1,1),m="Translate 1 up 1 right.";assertEquals(w.apply(n),new Point(1,1),m),assertEquals(w.apply(a),new Point(2,1),m),assertEquals(w.apply(o),new Point(1,2),m),assertEquals(w.apply(t),new Point(2,2),m),console.log("\n"),console.log("\n\n"),console.log("Beginning test for transformation-transformation operations."),assertEquals(zero.apply(new Transformation(1,1,1,1,1,1)),zero,"Zero matrix times anything is zero."),assertEquals(id.apply(new Transformation(1,1,1,1,1,1)),new Transformation(1,1,1,1,1,1),"Identity times x is x."),assertEquals(new Transformation(1,1,1,1,1,1).apply(id),new Transformation(1,1,1,1,1,1),"x times identity is x."),assertEquals(s.apply(w),new Transformation(2,0,0,2,2,2),"Trans, then double."),assertEquals(w.apply(s),new Transformation(2,0,0,2,1,1),"Double, then trans."),assertEquals(l.apply(s),new Transformation(0,2,-2,0,0,0),"Rotate, double."),console.log("\n\n\n"),console.log("Beginning test for transformation generation functions."),console.log("Two-point generation, relative:"),assertEquals(Transformation.generateTransformation1(new Point(0,0),new Point(1,0)),new Transformation(1,0,0,1,0,0),"Identity."),assertEquals(Transformation.generateTransformation1(new Point(0,0),new Point(-1,0)),new Transformation(-1,0,0,-1,0,0),"Rotate (pi)"),assertEquals(Transformation.generateTransformation1(new Point(0,0),new Point(0,-1)),new Transformation(0,-1,1,0,0,0),"Rotate (3pi/2)"),assertEquals(Transformation.generateTransformation1(new Point(1,0),new Point(1,1)),new Transformation(0,1,-1,0,1,0),"Rotate(pi/2), trans:1,0"),assertEquals(Transformation.generateTransformation1(new Point(1,0),new Point(2,0)),new Transformation(1,0,0,1,1,0),"trans:1,0"),assertEquals(Transformation.generateTransformation1(new Point(0,-1),new Point(0,0)),new Transformation(-1,0,0,-1,0,-1),"Rot(pi), Trans:0,-1"),console.log("Size-angle-trans generation:"),assertEquals(Transformation.generateTransformation2(0,1,0,0),id,"Identity."),assertEquals(Transformation.generateTransformation2(0,2,0,0),new Transformation(2,0,0,2,0,0),"Double."),assertEquals(Transformation.generateTransformation2(Math.PI/2,1,0,0),new Transformation(0,1,-1,0,0,0),"Rotate(pi/2)"),assertEquals(Transformation.generateTransformation2(0,1,1,1),new Transformation(1,0,0,1,1,1),"Trans:1,1"),console.log("Two-point generation, absolute."),assertEquals(Transformation.generateTransformation3(new Point(0,0),new Point(0,1)),new Transformation(1,0,0,1,0,0),"Identity."),assertEquals(Transformation.generateTransformation3(new Point(0,0),new Point(-1,0)),new Transformation(0,1,-1,0,0,0),"Rotate (pi/2)"),assertEquals(Transformation.generateTransformation3(new Point(0,0),new Point(0,-1)),new Transformation(-1,0,0,-1,0,0),"Rotate (pi)"),assertEquals(Transformation.generateTransformation3(new Point(1,0),new Point(1,1)),new Transformation(1,0,0,1,1,0),"Trans: 1,0"),assertEquals(Transformation.generateTransformation3(new Point(1,0),new Point(2,0)),new Transformation(0,-1,1,0,1,0),"Rot:-pi/2, trans:1,0"),assertEquals(Transformation.generateTransformation3(new Point(0,-1),new Point(0,0)),new Transformation(1,0,0,1,0,-1),"Trans:0,-1")}function fractalDrawBenchmark(){let n=new Line(new Transformation(100,0,0,100,0,0)),a=new Branch(Transformation.generateTransformation2(Math.PI/6,.82,0,100)),o=new Branch(Transformation.generateTransformation2(-Math.PI/6,.82,0,100));fractal.trunk.push(n),fractal.children.push(a),fractal.children.push(o),meta.renderThreshold=2;let t=Date.now();return fractal.draw(),Date.now()-t+"ms"}var timeDrawing=0,timeCalculating=0;
//# sourceMappingURL=index.11169039.js.map
