{"mappings":"AAmBA,GAAIA,KACF,IAAIC,OAAS,IAAIC,eAAe,IAAK,EAAG,EAAG,IAAK,EAAG,GAC/CC,OAAS,IAAID,eAAe,EAAG,KAAK,IAAM,EAAG,EAAG,GAChDE,OAAS,IAAIF,eAAe,IAAK,EAAG,EAAG,IAAK,GAAI,IAEhDG,OAAS,IAAIH,eAAe,IAAK,IAAK,IAAK,IAAK,IAAK,KACrDI,OAAS,IAAIJ,eAAe,EAAG,GAAI,GAAI,GAAI,GAAI,KAC/CK,OAAS,IAAIL,gBAAe,IAAK,GAAK,IAAK,IAAI,KAAM,KAErDM,GAAK,IAAIC,KAAKR,OAAQS,MAAO,GAC7BC,GAAK,IAAIF,KAAKN,QACdS,GAAK,IAAIH,KAAKL,QAEdS,GAAK,IAAIJ,KAAKJ,QACdS,GAAK,IAAIL,KAAKH,QACdS,GAAK,IAAIN,KAAKF,QAEdS,MAAQ,IAAIC,MAAM,IAAK,EAAG,GAC1BC,WAAa,IAAIhB,eAAe,IAAK,EAAG,EAAG,IAAK,EAAG,EAAGc,OACtDG,GAAKD,WAAWE,MAAMZ,IAE5B,SAASa,WAAWC,EAAQC,GA0B1B,IAAIC,EAzBJ,SAASC,EAAOC,EAAQC,GACtB,UAAWD,UAAiBC,EAC1B,OAAO,EAGT,GAAsB,iBAAXD,EAAqB,CAC9B,IAAIE,GAAI,EACR,IAAK,IAAIC,KAAKH,EACZE,EAAIA,GAAKH,EAAOC,EAAOG,GAAIF,EAASE,IAEtC,IAAK,IAAIA,KAAKF,EACZC,EAAIA,GAAKH,EAAOC,EAAOG,GAAIF,EAASE,IAKtC,OAAOD,EACF,MAAsB,iBAAXF,EAETI,KAAKC,IAAIL,EAASC,GAAY,KAE9BD,IAAWC,EAIdF,CAAOH,EAAQC,GACvB,OAAOC,EAGT,SAASQ,aAAaN,EAAQC,EAAUM,GAClCZ,WAAWK,EAAQC,GACrBO,QAAQC,IAAI,oBAGdD,QAAQC,IAAI,QAAQF,cAGtB,SAASG,yBACP,IAAIC,EAAK,IAAIC,MAAM,EAAG,GAClBC,EAAK,IAAID,MAAM,EAAG,GAClBE,EAAK,IAAIF,MAAM,EAAG,GAClBG,EAAK,IAAIH,MAAM,EAAG,GAEtBJ,QAAQC,IAAI,kCACZD,QAAQC,IAAI,6CAEZD,QAAQC,IAAI,+BACZ,IAAIlC,EAASyC,GACTC,EAAO,yBACXX,aAAa/B,EAAOmB,MAAMiB,GAAKA,EAAIM,GACnCX,aAAa/B,EAAOmB,MAAMmB,GAAKA,EAAII,GACnCX,aAAa/B,EAAOmB,MAAMoB,GAAKA,EAAIG,GACnCX,aAAa/B,EAAOmB,MAAMqB,GAAKA,EAAIE,GACnCT,QAAQC,IAAI,MAGZD,QAAQC,IAAI,mCACZ,IAAIhC,EAAS,IAAID,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C0C,EAAO,mBACXZ,aAAa7B,EAAOiB,MAAMiB,GAAK,IAAIC,MAAM,EAAG,GAAIM,GAChDZ,aAAa7B,EAAOiB,MAAMmB,GAAK,IAAID,MAAM,EAAG,GAAIM,GAChDZ,aAAa7B,EAAOiB,MAAMoB,GAAK,IAAIF,MAAM,EAAG,GAAIM,GAChDZ,aAAa7B,EAAOiB,MAAMqB,GAAK,IAAIH,MAAM,EAAG,GAAIM,GAChDV,QAAQC,IAAI,MAGZD,QAAQC,IAAI,qCACZ,IAAI/B,EAAS,IAAIF,eAAe,EAAG,GAAG,EAAI,EAAG,EAAG,GAC5C2C,EAAO,yCACXb,aAAa5B,EAAOgB,MAAMiB,GAAK,IAAIC,MAAM,EAAG,GAAIO,GAChDb,aAAa5B,EAAOgB,MAAMmB,GAAK,IAAID,MAAM,EAAG,GAAIO,GAChDb,aAAa5B,EAAOgB,MAAMoB,GAAK,IAAIF,OAAM,EAAI,GAAIO,GACjDb,aAAa5B,EAAOgB,MAAMqB,GAAK,IAAIH,OAAM,EAAI,GAAIO,GACjDX,QAAQC,IAAI,MAGZD,QAAQC,IAAI,sCACZ,IAAI9B,EAAS,IAAIH,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C4C,EAAO,0BACXd,aAAa3B,EAAOe,MAAMiB,GAAK,IAAIC,MAAM,EAAG,GAAIQ,GAChDd,aAAa3B,EAAOe,MAAMmB,GAAK,IAAID,MAAM,EAAG,GAAIQ,GAChDd,aAAa3B,EAAOe,MAAMoB,GAAK,IAAIF,MAAM,EAAG,GAAIQ,GAChDd,aAAa3B,EAAOe,MAAMqB,GAAK,IAAIH,MAAM,EAAG,GAAIQ,GAChDZ,QAAQC,IAAI,MAEZD,QAAQC,IAAI,QAEZD,QAAQC,IAAI,gEAEZH,aACEe,KAAK3B,MAAM,IAAIlB,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,IAC7C6C,KACA,uCAEFf,aACEU,GAAGtB,MAAM,IAAIlB,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,IAC3C,IAAIA,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,0BAEF8B,aACE,IAAI9B,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGkB,MAAMsB,IAC3C,IAAIxC,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,0BAEF8B,aACE7B,EAAOiB,MAAMf,GACb,IAAIH,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,uBAEF8B,aACE3B,EAAOe,MAAMjB,GACb,IAAID,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,uBAEF8B,aACE5B,EAAOgB,MAAMjB,GACb,IAAID,eAAe,EAAG,GAAG,EAAI,EAAG,EAAG,GACnC,mBAGFgC,QAAQC,IAAI,UAEZD,QAAQC,IAAI,2DACZD,QAAQC,IAAI,mCACZH,aACE9B,eAAe8C,wBAAwB,IAAIV,MAAM,EAAG,GAAI,IAAIA,MAAM,EAAG,IACrE,IAAIpC,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,aAEF8B,aACE9B,eAAe8C,wBAAwB,IAAIV,MAAM,EAAG,GAAI,IAAIA,OAAM,EAAI,IACtE,IAAIpC,gBAAe,EAAI,EAAG,GAAG,EAAI,EAAG,GACpC,eAEF8B,aACE9B,eAAe8C,wBAAwB,IAAIV,MAAM,EAAG,GAAI,IAAIA,MAAM,GAAG,IACrE,IAAIpC,eAAe,GAAG,EAAI,EAAG,EAAG,EAAG,GACnC,kBAEF8B,aACE9B,eAAe8C,wBAAwB,IAAIV,MAAM,EAAG,GAAI,IAAIA,MAAM,EAAG,IACrE,IAAIpC,eAAe,EAAG,GAAG,EAAI,EAAG,EAAG,GACnC,2BAEF8B,aACE9B,eAAe8C,wBAAwB,IAAIV,MAAM,EAAG,GAAI,IAAIA,MAAM,EAAG,IACrE,IAAIpC,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,aAEF8B,aACE9B,eAAe8C,wBAAwB,IAAIV,MAAM,GAAG,GAAK,IAAIA,MAAM,EAAG,IACtE,IAAIpC,gBAAe,EAAI,EAAG,GAAG,EAAI,GAAG,GACpC,uBAEFgC,QAAQC,IAAI,gCACZH,aACE9B,eAAe+C,wBAAwB,EAAG,EAAG,EAAG,GAChDP,GACA,aAEFV,aACE9B,eAAe+C,wBAAwB,EAAG,EAAG,EAAG,GAChD,IAAI/C,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,WAEF8B,aACE9B,eAAe+C,wBAAwBnB,KAAKoB,GAAK,EAAG,EAAG,EAAG,GAC1D,IAAIhD,eAAe,EAAG,GAAG,EAAI,EAAG,EAAG,GACnC,gBAEF8B,aACE9B,eAAe+C,wBAAwB,EAAG,EAAG,EAAG,GAChD,IAAI/C,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,aAEFgC,QAAQC,IAAI,mCACZH,aACE9B,eAAeiD,wBAAwB,IAAIb,MAAM,EAAG,GAAI,IAAIA,MAAM,EAAG,IACrE,IAAIpC,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,aAEF8B,aACE9B,eAAeiD,wBAAwB,IAAIb,MAAM,EAAG,GAAI,IAAIA,OAAM,EAAI,IACtE,IAAIpC,eAAe,EAAG,GAAG,EAAI,EAAG,EAAG,GACnC,iBAEF8B,aACE9B,eAAeiD,wBAAwB,IAAIb,MAAM,EAAG,GAAI,IAAIA,MAAM,GAAG,IACrE,IAAIpC,gBAAe,EAAI,EAAG,GAAG,EAAI,EAAG,GACpC,eAEF8B,aACE9B,eAAeiD,wBAAwB,IAAIb,MAAM,EAAG,GAAI,IAAIA,MAAM,EAAG,IACrE,IAAIpC,eAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAClC,cAEF8B,aACE9B,eAAeiD,wBAAwB,IAAIb,MAAM,EAAG,GAAI,IAAIA,MAAM,EAAG,IACrE,IAAIpC,eAAe,GAAG,EAAI,EAAG,EAAG,EAAG,GACnC,wBAEF8B,aACE9B,eAAeiD,wBAAwB,IAAIb,MAAM,GAAG,GAAK,IAAIA,MAAM,EAAG,IACtE,IAAIpC,eAAe,EAAG,EAAG,EAAG,EAAG,GAAG,GAClC,cAMJ,SAASkD,uBACP,IAAI5C,EAAK,IAAIC,KAAK,IAAIP,eAAe,IAAK,EAAG,EAAG,IAAK,EAAG,IACpDmD,EAAK,IAAIC,OACXpD,eAAe+C,wBAAwBnB,KAAKoB,GAAK,EAAG,IAAM,EAAG,MAE3DK,EAAK,IAAID,OACXpD,eAAe+C,yBAAyBnB,KAAKoB,GAAK,EAAG,IAAM,EAAG,MAGhEM,QAAQC,MAAMC,KAAKlD,GACnBgD,QAAQG,SAASD,KAAKL,GACtBG,QAAQG,SAASD,KAAKH,GAEtBK,KAAKC,gBAAkB,EAEvB,IAAIC,EAAQC,KAAKC,MAIjB,OAHAR,QAAQS,OACOF,KAAKC,MAAQF,EAEV,KA6BpB,IAAII,YAAc,EACdC,gBAAkB","sources":["testing.js"],"sourcesContent":["// Testing, benchmarks.\n\n/* Report on testing:\n\tI ran a test to determine the impact of calls to lineTo() on the performance of drawing. The results are:\n\t\t\t   \t\tnormalized:\n\t1: 79\t\t\t1\n\t2: 82\t\t\t1.03\n\t3: 99\t\t\t1.25\n\t4: 97\t\t\t1.22\n\t5: 108\t\t\t1.36\n\t6: 157\t\t\t1.98\n\t7: 148\t\t\t1.87\n\t8: 152\t\t\t1.92\n\t9: 165\t\t\t2.08\n\t10: 175\t\t\t2.21\n\tcircle: 97\t\t1.22\n\n\n*/\nif (test) {\n  var trans1 = new Transformation(200, 0, 0, 200, 0, 0);\n  var trans2 = new Transformation(0, 100, -100, 0, 0, 0);\n  var trans3 = new Transformation(100, 0, 0, 100, 10, 10);\n\n  var trans4 = new Transformation(100, 100, 100, 100, 100, 100);\n  var trans5 = new Transformation(1, 12, 20, 10, 10, 100);\n  var trans6 = new Transformation(-10, -10, 100, 20, -100, -100);\n\n  var l1 = new Line(trans1, black, 1);\n  var l2 = new Line(trans2);\n  var l3 = new Line(trans3);\n\n  var l4 = new Line(trans4);\n  var l5 = new Line(trans5);\n  var l6 = new Line(trans6);\n\n  var color = new Color(255, 0, 0);\n  var colorTrans = new Transformation(100, 0, 0, 100, 0, 0, color);\n  var ex = colorTrans.apply(l1);\n}\nfunction deepEquals(actual, expected) {\n  function helper(actual, expected) {\n    if (typeof actual != typeof expected) {\n      return false;\n    }\n\n    if (typeof actual === \"object\") {\n      let t = true;\n      for (var x in actual) {\n        t = t && helper(actual[x], expected[x]);\n      }\n      for (var x in expected) {\n        t = t && helper(actual[x], expected[x]);\n      }\n\n      if (t === false) {\n      }\n      return t;\n    } else if (typeof actual === \"number\") {\n      // must use fuzzy equals for float case.\n      return Math.abs(actual - expected) < 0.00001;\n    } else {\n      return actual === expected;\n    }\n  }\n\n  let t = helper(actual, expected);\n  return t;\n}\n\nfunction assertEquals(actual, expected, message) {\n  if (deepEquals(actual, expected)) {\n    console.log(`Test successful.`);\n    return;\n  }\n  console.log(`Test[${message}] failed.`);\n}\n\nfunction transformationUnitTest() {\n  let p1 = new Point(0, 0);\n  let p2 = new Point(1, 0);\n  let p3 = new Point(0, 1);\n  let p4 = new Point(1, 1);\n\n  console.log(\"Beginning transformation test:\");\n  console.log(\"Beginning primitive transformation tests:\");\n  // id test.\n  console.log(\"Testing transformation(id):\");\n  let trans1 = id;\n  let msg1 = \"Trivial identity test.\";\n  assertEquals(trans1.apply(p1), p1, msg1);\n  assertEquals(trans1.apply(p2), p2, msg1);\n  assertEquals(trans1.apply(p3), p3, msg1);\n  assertEquals(trans1.apply(p4), p4, msg1);\n  console.log(\"\\n\");\n\n  //scale test\n  console.log(\"Testing transformation(double):\");\n  let trans2 = new Transformation(2, 0, 0, 2, 0, 0);\n  let msg2 = \"Doubling length.\";\n  assertEquals(trans2.apply(p1), new Point(0, 0), msg2);\n  assertEquals(trans2.apply(p2), new Point(2, 0), msg2);\n  assertEquals(trans2.apply(p3), new Point(0, 2), msg2);\n  assertEquals(trans2.apply(p4), new Point(2, 2), msg2);\n  console.log(\"\\n\");\n\n  //rotate test\n  console.log(\"Testing transformation(rot-pi/2):\");\n  let trans3 = new Transformation(0, 1, -1, 0, 0, 0);\n  let msg3 = \"Rotate Pi/2 radians counter-clockwise.\";\n  assertEquals(trans3.apply(p1), new Point(0, 0), msg3);\n  assertEquals(trans3.apply(p2), new Point(0, 1), msg3);\n  assertEquals(trans3.apply(p3), new Point(-1, 0), msg3);\n  assertEquals(trans3.apply(p4), new Point(-1, 1), msg3);\n  console.log(\"\\n\");\n\n  //Translate test.\n  console.log(\"Testing transformation(trans-1,1):\");\n  let trans4 = new Transformation(1, 0, 0, 1, 1, 1);\n  let msg4 = \"Translate 1 up 1 right.\";\n  assertEquals(trans4.apply(p1), new Point(1, 1), msg4);\n  assertEquals(trans4.apply(p2), new Point(2, 1), msg4);\n  assertEquals(trans4.apply(p3), new Point(1, 2), msg4);\n  assertEquals(trans4.apply(p4), new Point(2, 2), msg4);\n  console.log(\"\\n\");\n\n  console.log(\"\\n\\n\");\n  //Transformation apply to transformation testing\n  console.log(\"Beginning test for transformation-transformation operations.\");\n\n  assertEquals(\n    zero.apply(new Transformation(1, 1, 1, 1, 1, 1)),\n    zero,\n    \"Zero matrix times anything is zero.\"\n  );\n  assertEquals(\n    id.apply(new Transformation(1, 1, 1, 1, 1, 1)),\n    new Transformation(1, 1, 1, 1, 1, 1),\n    \"Identity times x is x.\"\n  );\n  assertEquals(\n    new Transformation(1, 1, 1, 1, 1, 1).apply(id),\n    new Transformation(1, 1, 1, 1, 1, 1),\n    \"x times identity is x.\"\n  );\n  assertEquals(\n    trans2.apply(trans4),\n    new Transformation(2, 0, 0, 2, 2, 2),\n    \"Trans, then double.\"\n  );\n  assertEquals(\n    trans4.apply(trans2),\n    new Transformation(2, 0, 0, 2, 1, 1),\n    \"Double, then trans.\"\n  );\n  assertEquals(\n    trans3.apply(trans2),\n    new Transformation(0, 2, -2, 0, 0, 0),\n    \"Rotate, double.\"\n  );\n\n  console.log(\"\\n\\n\\n\");\n  //Transformation generation testing.\n  console.log(\"Beginning test for transformation generation functions.\");\n  console.log(\"Two-point generation, relative:\");\n  assertEquals(\n    Transformation.generateTransformation1(new Point(0, 0), new Point(1, 0)),\n    new Transformation(1, 0, 0, 1, 0, 0),\n    \"Identity.\"\n  );\n  assertEquals(\n    Transformation.generateTransformation1(new Point(0, 0), new Point(-1, 0)),\n    new Transformation(-1, 0, 0, -1, 0, 0),\n    \"Rotate (pi)\"\n  );\n  assertEquals(\n    Transformation.generateTransformation1(new Point(0, 0), new Point(0, -1)),\n    new Transformation(0, -1, 1, 0, 0, 0),\n    \"Rotate (3pi/2)\"\n  );\n  assertEquals(\n    Transformation.generateTransformation1(new Point(1, 0), new Point(1, 1)),\n    new Transformation(0, 1, -1, 0, 1, 0),\n    \"Rotate(pi/2), trans:1,0\"\n  );\n  assertEquals(\n    Transformation.generateTransformation1(new Point(1, 0), new Point(2, 0)),\n    new Transformation(1, 0, 0, 1, 1, 0),\n    \"trans:1,0\"\n  );\n  assertEquals(\n    Transformation.generateTransformation1(new Point(0, -1), new Point(0, 0)),\n    new Transformation(-1, 0, 0, -1, 0, -1),\n    \"Rot(pi), Trans:0,-1\"\n  );\n  console.log(\"Size-angle-trans generation:\");\n  assertEquals(\n    Transformation.generateTransformation2(0, 1, 0, 0),\n    id,\n    \"Identity.\"\n  );\n  assertEquals(\n    Transformation.generateTransformation2(0, 2, 0, 0),\n    new Transformation(2, 0, 0, 2, 0, 0),\n    \"Double.\"\n  );\n  assertEquals(\n    Transformation.generateTransformation2(Math.PI / 2, 1, 0, 0),\n    new Transformation(0, 1, -1, 0, 0, 0),\n    \"Rotate(pi/2)\"\n  );\n  assertEquals(\n    Transformation.generateTransformation2(0, 1, 1, 1),\n    new Transformation(1, 0, 0, 1, 1, 1),\n    \"Trans:1,1\"\n  );\n  console.log(\"Two-point generation, absolute.\");\n  assertEquals(\n    Transformation.generateTransformation3(new Point(0, 0), new Point(0, 1)),\n    new Transformation(1, 0, 0, 1, 0, 0),\n    \"Identity.\"\n  );\n  assertEquals(\n    Transformation.generateTransformation3(new Point(0, 0), new Point(-1, 0)),\n    new Transformation(0, 1, -1, 0, 0, 0),\n    \"Rotate (pi/2)\"\n  );\n  assertEquals(\n    Transformation.generateTransformation3(new Point(0, 0), new Point(0, -1)),\n    new Transformation(-1, 0, 0, -1, 0, 0),\n    \"Rotate (pi)\"\n  );\n  assertEquals(\n    Transformation.generateTransformation3(new Point(1, 0), new Point(1, 1)),\n    new Transformation(1, 0, 0, 1, 1, 0),\n    \"Trans: 1,0\"\n  );\n  assertEquals(\n    Transformation.generateTransformation3(new Point(1, 0), new Point(2, 0)),\n    new Transformation(0, -1, 1, 0, 1, 0),\n    \"Rot:-pi/2, trans:1,0\"\n  );\n  assertEquals(\n    Transformation.generateTransformation3(new Point(0, -1), new Point(0, 0)),\n    new Transformation(1, 0, 0, 1, 0, -1),\n    \"Trans:0,-1\"\n  );\n\n  //Color Transformation testing\n}\n\nfunction fractalDrawBenchmark() {\n  let l1 = new Line(new Transformation(100, 0, 0, 100, 0, 0));\n  let b1 = new Branch(\n    Transformation.generateTransformation2(Math.PI / 6, 0.82, 0, 100)\n  );\n  let b2 = new Branch(\n    Transformation.generateTransformation2(-Math.PI / 6, 0.82, 0, 100)\n  );\n\n  fractal.trunk.push(l1);\n  fractal.children.push(b1);\n  fractal.children.push(b2);\n\n  meta.renderThreshold = 2;\n\n  let start = Date.now();\n  fractal.draw();\n  let duration = Date.now() - start;\n\n  return duration + \"ms\";\n\n  // notes: I did some experiments.\n  // \t\t- vector Calculation time: 227 ms\n  //      - shape drawing time: 800ms\n  //\n  //\t\tApproximately 4/5 of the computation time is spent drawing; There must be a better way...\n  //test results:\n  //v1 = 1350 ms\n  //v2 = 803 ms  (YES!)\n  //v3 = 780 - save 2% time but removes the ability to scroll/grab, so scrapped.\n  //v4 = 780 ms - stop calculating point size, not needed.\n  //v5 = 760 ms - slight change to map function.\n\n  // new game:\n\n  // I had to roll back some of the previous changes, including the most significant one, since it disabled the ability to color the fractal =(.\n  // I'll be starting a new performance tracking log.\n\n  //v1: 1769 ms\n  //    Feb 21 2021\n  //    notes: dynamically alters renderThreshold in response to scaling. (since the user won't be able to see the small stuff anyway.\n\n  //v2: 986 ms\n  //    Feb 21 2021\n  //    Disabled drawing of objects that are off screen.\n}\n\n// What is the proprtion of time spent drawing, vs calculating vectors?\nvar timeDrawing = 0;\nvar timeCalculating = 0;\n"],"names":["test","trans1","Transformation","trans2","trans3","trans4","trans5","trans6","l1","Line","black","l2","l3","l4","l5","l6","color","Color","colorTrans","ex","apply","deepEquals","actual1","expected1","t1","helper","actual","expected","t","x","Math","abs","assertEquals","message","console","log","transformationUnitTest","p1","Point","p2","p3","p4","id","msg1","msg2","msg3","msg4","zero","generateTransformation1","generateTransformation2","PI","generateTransformation3","fractalDrawBenchmark","b1","Branch","b2","fractal","trunk","push","children","meta","renderThreshold","start","Date","now","draw","timeDrawing","timeCalculating"],"version":3,"file":"index.11169039.js.map"}